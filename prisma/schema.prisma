// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
model Coupon{
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title String
  couponCode String
  expiryDate DateTime
  isActive Boolean
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Banner{
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title String
  link  String
  imageUrl String
  isActive Boolean
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Category{
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title String
  slug String @unique
  imageUrl String?
  description String?
  isActive Boolean 
  products Product[]
  trainings Training[]
  
  marketId String[] @db.ObjectId
  markets Market[] @relation(fields: [marketId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Market{
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title String 
  slug String @unique
  imageUrl String?
  description String?
  isActive Boolean
  
  categoryId String[] @db.ObjectId
  categories Category[] @relation(fields: [categoryId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Product {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  slug           String @unique
  imageUrl       String?
  description    String?
  isActive       Boolean
  isWholeSale    Boolean
  sku            String?
  barcode        String?
  productCode    String?
  unit           String?
  productPrice   Float
  salePrice      Float
  wholesalePrice Float?
  wholesaleQty   Int?
  productStock   Int
  qty            Int
  tags           String[]
  category       Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId     String @db.ObjectId

  user           User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         String @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model FarmerProfile{
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  code String
  contactPerson String?
  contactPersonPhone String?
  profileImageUrl String?
  email String
  title String
  notes String?
  phone String
  physicalAddress String?
  terms String?
  isActive Boolean
  landSize Float
  products   String []
  mainCrop String

  user    User @relation(fields:[userId], references:[id], onDelete: Cascade, onUpdate: Cascade)
  userId  String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Training{
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title String
  slug String @unique
  imageUrl String?
  description String?
  isActive Boolean
  content String?
  category Category @relation(fields:[categoryId], references:[id])
  categoryId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
enum UserRole{
  Admin
  User
  Farmer
  Moderator
}
model User{
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String? @unique
  password       String
  emailVerified  Boolean @default(false)
  products       Product[]
  role           UserRole @default(User)
  verificationToken String?
  FarmerProfile  FarmerProfile?
  profile        UserProfile?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
model UserProfile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  dateOfBirth DateTime?
  address    String?
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}